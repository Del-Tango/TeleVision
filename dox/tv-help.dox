#!/bin/bash
#
# Excellent Regards, the Alveare Solutions #!/Society -x
#
# HELP

cat <<EOF
    ___________________________________________________________________________

     *                            *  TeleVision  *                           *
    __________________________________________________v1.0UnitsOfThought_______
               Excellent Regards, the Alveare Solutions #!/Society -x

    [ EXAMPLE ]: Issue single message using bot xXx in debug mode but with
                 STDOUT and STDERR silenced, soo no output... yeah, that's right -

        ~$ television.py \\
            -D  | --debug \\
            -S  | --silence \\
            -c  | --config-file /etc/conf/kte.conf.json \\
            -l  | --log-file /etc/log/kte.log \\
            -a  | --action scroll-msg \\
            -t  | --bot-token xXx \\
            -i  | --chat-id xXx \\
            -m  | --message 'TeleVision Works!'

    [ EXAMPLE ]: Open interactive promp for issuing single messages -

        ~$ television.py \\
            -c  | --config-file /etc/conf/kte.conf.json \\
            -l  | --log-file /etc/log/kte.log \\
            -a  | --action scroll-msg \\
            -t  | --bot-token xXx \\
            -i  | --chat-id xXx \\
            -w  | --watchdog

    [ EXAMPLE ]: Dump contents of file in chat room  -

        ~$ television.py \\
            -c  | --config-file /etc/conf/kte.conf.json \\
            -l  | --log-file /etc/log/kte.log \\
            -a  | --action scroll-file \\
            -t  | --bot-token xXx \\
            -i  | --chat-id xXx \\
            -f  | --input-file /file/path1,/file/path2

    [ EXAMPLE ]: Monitor file and issue messages with all new file lines -

        ~$ television.py \\
            -c  | --config-file /etc/conf/kte.conf.json \\
            -l  | --log-file /etc/log/kte.log \\
            -a  | --action scroll-file \\
            -t  | --bot-token xXx \\
            -i  | --chat-id xXx \\
            -f  | --input-file /file/path1,/file/path2 \\
            -w  | --watchdog

    [ EXAMPLE ]: Start custom bot control handlers the user can access with
                 /commands to run functions from src/backpack/tv_bot_ctrls.py -

        ~$ television.py \\
            -c  | --config-file /etc/conf/kte.conf.json \\
            -l  | --log-file /etc/log/kte.log \\
            -a  | --action bot-ctrl \\
            -t  | --bot-token xXx

Options:
  -h, --help            show this help message and exit
  -c FILE_PATH, --config-file=FILE_PATH
                        Configuration file to load default values from.
  -D, --debug           Display more verbose output and log messages.
  -l FILE_PATH, --log-file=FILE_PATH
                        Path to the log file.
  -a ACTION, --action=ACTION
                        Action to execute. Values can be (scroll-msg|scroll-
                        file|bot-ctrl)
  -t TOKEN, --bot-token=TOKEN
                        String token the Telegram @BotFather gave you for your
                        /newbot.
  -i ID, --chat-id=ID   Chat ID for your Telegram bot. You can ask @RawDataBot
                        what it is.
  -f PATH_CSV, --input-file=PATH_CSV
                        Path to file to read and redirect content.
  -w, --watchdog        Makes --action scroll-msg open an interactive prompt
                        for the user to continuously write messages, and
                        scroll-file to continuously read file and redirect new
                        lines to chat.
  -m MSG, --message=MSG
                        Implies --action scroll-msg. Message to send.
  -S, --silence         Supress STDOUT output.

EOF

exit $?
